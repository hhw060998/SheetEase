using System.Collections.Generic;
using Newtonsoft.Json;


namespace Data.TableScript
{
	/// <summary> This is auto-generated, don't modify manually </summary>
	public class SampleInfo : IConfigRawInfo
	{
		/// <summary> 编号 </summary>
		[JsonProperty("id")]
		public int id { get; private set; }
		
		/// <summary> 字符串类型 </summary>
		[JsonProperty("name")]
		public string name { get; private set; }
		
		/// <summary> 整型 </summary>
		[JsonProperty("damage")]
		public int damage { get; private set; }
		
		/// <summary> 浮点型 </summary>
		[JsonProperty("damage_increase")]
		public float damage_increase { get; private set; }
		
		/// <summary> 字符串列表 </summary>
		[JsonProperty("attr_names")]
		public List<string> attr_names { get; private set; }
		
		/// <summary> 整型列表 </summary>
		[JsonProperty("attr_values")]
		public List<int> attr_values { get; private set; }
		
		/// <summary> 浮点数列表 </summary>
		[JsonProperty("float_values")]
		public List<float> float_values { get; private set; }
		
		/// <summary> 字典-整型:字符串 </summary>
		[JsonProperty("dict_values1")]
		public Dictionary<int,string> dict_values1 { get; private set; }
		
		/// <summary> 字典-字符串:浮点 </summary>
		[JsonProperty("dict_values2")]
		public Dictionary<string,float> dict_values2 { get; private set; }
		
		/// <summary> 引用示例: 也可以加[RefExample]，这样会选择第一列非空数据 </summary>
		[JsonProperty("ref_id")]
		public int ref_id { get; private set; }
	}
	
	/// <summary>
	/// Config data class for Sample. Generated by tool.
	/// Query methods are provided by ConfigManager; keep this class minimal.
	/// </summary>
	public class SampleConfig : ConfigDataBase<SampleInfo>
	{
	
	}
}